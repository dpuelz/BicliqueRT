% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/maintest.R
\name{biclique.decompose}
\alias{biclique.decompose}
\title{Generate a biclique decomposition given null hypothesis.}
\usage{
biclique.decompose(
  Z,
  hypothesis,
  controls = list(method = "greedy", mina = 10, num_randomizations = 2000),
  stop_Zobs = F
)
}
\arguments{
\item{Z}{A vector that gives the realization of treatment assignment. Its length should match \code{Y}
and is the number of units in the experiment.}

\item{hypothesis}{A list that contains three functions specifyting the experiment design and null hypothesis.
See details for further illustration.}

\item{controls}{A list that contains settings for biclique decomposition and covariates adjustment.
By default it is \code{list(method="greedy", mina=10, num_randomizations=2000)}.
That is, by default it uses greedy decomposition algorithm with \code{mina=10}, and the number of
randomizations to perform is 2000. See details for further illustration.}

\item{stop_Zobs}{Whether to stop when the biclique decomposition finds a biclique that contains the observed
treatment allocation, \code{Z}. Default is \code{FALSE}.}
}
\value{
a list \code{MNE} of clique decomposition and specified \code{controls}.
Each element of \code{MNE} records one biclique decomposed from a multi-null exposure
graph and contains its focal units and focal assignments.
}
\description{
Generate a biclique decomposition given null hypothesis.
}
\details{
\code{hypothesis} contains three functions:
\itemize{
 \item{\code{design_fn}} {A function that returns a realization of treatment for the whole sample. For example,
if each unit has equal probability \eqn{0.2} to receive the treatment independently, we can write
\code{design_fn = function() { rbinom(num_units, 1, prob=0.2) }}.}
 \item{\code{exposure_i}} {A function that returns exposure \eqn{f_i(z)} of unit \eqn{i} under treatment \eqn{z} where
\eqn{z} is the treatment for the whole sample. The inputs of the function are an index \code{i} and
a vector \code{z}. For example, if the exposure of \eqn{i} under \eqn{z} is the treatment it receives, then
we can write \code{exposure_i = function(z, i) { z[i] }}. See more examples in the README file.}
 \item{\code{null_equiv}} {A function that takes two inputs from \code{exposure_i} and determines
whether \eqn{f_i(z_1)} is equivalent to \eqn{f_i(z_2)} under the null hypothesis. For example, if the
null is "extent of interference" type of null, we can write
\code{null_equiv = function(e1, e2) {identical(e1, e2)}}.}
}
\code{controls} contains several components:
\itemize{
 \item{\code{method}} {Specifies the decomposition method. Should be either \code{"bimax"} or \code{"greedy"}.}
 \item{\code{minr},\code{minc} or \code{mina}} {If \code{"bimax"} is used, \code{minr} and \code{minc}
 should be supplied that specify the minimum number of units and assignments
 in the bicliques found by the algorithm. If \code{"greedy"} is used, \code{mina} should be supplied.}
 \item{\code{num_randomizations}} {Number of randomizations to perform. If it is not specified, will be set
 to be 2000 by default.}
 \item{(optional) \code{Xadj}} {The covariates that might affect Y. If it is specified in \code{controls},
  will replace \code{Y} by the residuals from the linear regression of \code{Y} on \code{Xadj}
  (number of rows in \code{Y} and in \code{Xadj} should be the same).
  Note that users would need to add an intercept to \code{Xadj} manually if they want.}
}
}
